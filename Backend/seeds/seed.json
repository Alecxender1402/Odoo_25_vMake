{
  "users": [
    {
      "username": "admin",
      "email": "admin@stackit.com",
      "password": "admin123",
      "role": "admin",
      "reputation": 5000
    },
    {
      "username": "superadmin",
      "email": "superadmin@stackit.com",
      "password": "admin123",
      "role": "admin",
      "reputation": 6000
    },
    {
      "username": "john_doe",
      "email": "john@example.com",
      "password": "password123",
      "role": "user",
      "reputation": 1250
    },
    {
      "username": "jane_smith",
      "email": "jane@example.com",
      "password": "password123",
      "role": "user",
      "reputation": 890
    },
    {
      "username": "tech_guru",
      "email": "techguru@example.com",
      "password": "password123",
      "role": "user",
      "reputation": 2340
    },
    {
      "username": "code_ninja",
      "email": "codeninja@example.com",
      "password": "password123",
      "role": "user",
      "reputation": 1560
    },
    {
      "username": "react_dev",
      "email": "reactdev@example.com",
      "password": "password123",
      "role": "user",
      "reputation": 1100
    }
  ],
  "stacks": [
    {
      "title": "How to implement user authentication in React?",
      "description": "<p>I'm building a React application and need to implement user authentication. What are the best practices for handling login, logout, and protecting routes? @john_doe @tech_guru might know about this.</p>",
      "tags": ["React", "Authentication", "JavaScript", "Security"],
      "creatorEmail": "john@example.com",
      "views": 145,
      "voteScore": 12,
      "upvotes": 15,
      "downvotes": 3
    },
    {
      "title": "Best practices for API design in Node.js",
      "description": "<p>What are the recommended patterns for designing RESTful APIs in Node.js? Looking for advice on error handling, validation, and documentation. @jane_smith any thoughts?</p>",
      "tags": ["Node.js", "API", "REST", "Best-Practices"],
      "creatorEmail": "jane@example.com",
      "views": 89,
      "voteScore": 8,
      "upvotes": 10,
      "downvotes": 2
    },
    {
      "title": "Understanding TypeScript generics with practical examples",
      "description": "<p>I'm struggling to understand how TypeScript generics work in real-world scenarios. Can someone provide practical examples and use cases? @code_ninja @react_dev help needed!</p>",
      "tags": ["TypeScript", "Generics", "JavaScript"],
      "creatorEmail": "techguru@example.com",
      "views": 67,
      "voteScore": 5,
      "upvotes": 7,
      "downvotes": 2
    },
    {
      "title": "How to optimize React performance for large datasets?",
      "description": "<p>I have a React component that renders a large table with thousands of rows. The performance is poor and the UI becomes unresponsive. What optimization techniques should I use?</p>",
      "tags": ["React", "Performance", "Optimization", "Large-Data"],
      "creatorEmail": "codeninja@example.com",
      "views": 234,
      "voteScore": 18,
      "upvotes": 22,
      "downvotes": 4
    },
    {
      "title": "MongoDB vs PostgreSQL for web applications",
      "description": "<p>I'm starting a new web project and can't decide between MongoDB and PostgreSQL. What are the key differences and when should I choose one over the other?</p>",
      "tags": ["MongoDB", "PostgreSQL", "Database", "Comparison"],
      "creatorEmail": "reactdev@example.com",
      "views": 178,
      "voteScore": 14,
      "upvotes": 17,
      "downvotes": 3
    }
  ],
  "comments": [
    {
      "text": "<p>For React authentication, I recommend using JWT tokens with secure storage. Here's a basic approach:</p><pre><code>// Store token securely\nlocalStorage.setItem('token', response.token);\n\n// Add to axios headers\naxios.defaults.headers.common['Authorization'] = `Bearer ${token}`;</code></pre><p>@admin what's your take on this approach?</p>",
      "authorEmail": "jane@example.com",
      "stackIndex": 0
    },
    {
      "text": "<p>Great question! For API design, always follow REST conventions and use proper HTTP status codes. Here are key principles:</p><ul><li>Use meaningful HTTP status codes</li><li>Implement consistent error handling</li><li>Add proper validation middleware</li><li>Document your endpoints</li></ul><p>@tech_guru agrees, right?</p>",
      "authorEmail": "john@example.com",
      "stackIndex": 1
    },
    {
      "text": "<p>TypeScript generics are powerful! Here's a simple example:</p><pre><code>function identity&lt;T&gt;(arg: T): T {\n  return arg;\n}\n\n// Usage\nconst stringResult = identity&lt;string&gt;('hello');\nconst numberResult = identity&lt;number&gt;(42);</code></pre><p>@jane_smith this should help you get started!</p>",
      "authorEmail": "reactdev@example.com",
      "stackIndex": 2
    },
    {
      "text": "<p>For React performance with large datasets, consider these techniques:</p><ol><li><strong>Virtualization</strong> - Use libraries like react-window</li><li><strong>Pagination</strong> - Load data in chunks</li><li><strong>Memoization</strong> - Use React.memo and useMemo</li><li><strong>Debouncing</strong> - For search and filters</li></ol>",
      "authorEmail": "techguru@example.com",
      "stackIndex": 3
    },
    {
      "text": "<p>The choice between MongoDB and PostgreSQL depends on your use case:</p><p><strong>Choose MongoDB when:</strong></p><ul><li>You need flexible schema</li><li>Working with JSON-like data</li><li>Rapid prototyping</li></ul><p><strong>Choose PostgreSQL when:</strong></p><ul><li>You need ACID compliance</li><li>Complex relationships</li><li>Strong consistency requirements</li></ul>",
      "authorEmail": "codeninja@example.com",
      "stackIndex": 4
    }
  ]
}